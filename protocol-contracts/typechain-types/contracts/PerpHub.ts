/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PerpHubInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addSupportedMarket"
      | "claim"
      | "counter"
      | "createOrder"
      | "orders"
      | "owner"
      | "removeSupportedMarket"
      | "renounceOwnership"
      | "resolveRound"
      | "shutDownMarket"
      | "supportedMarket"
      | "totalCurrentTrade"
      | "transferOwnership"
      | "userOrder"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Claim"
      | "CreateOrder"
      | "MarketAdded"
      | "MarketRemoved"
      | "MarketShutDown"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addSupportedMarket",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "counter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createOrder",
    values: [BigNumberish, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeSupportedMarket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveRound",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "shutDownMarket",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedMarket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCurrentTrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userOrder",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addSupportedMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "counter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeSupportedMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shutDownMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCurrentTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userOrder", data: BytesLike): Result;
}

export namespace ClaimEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    counter: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, counter: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    counter: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateOrderEvent {
  export type InputTuple = [
    user: AddressLike,
    betAmount: BigNumberish,
    betOn: string,
    time: BigNumberish,
    rounId: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    betAmount: bigint,
    betOn: string,
    time: bigint,
    rounId: bigint
  ];
  export interface OutputObject {
    user: string;
    betAmount: bigint;
    betOn: string;
    time: bigint;
    rounId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketAddedEvent {
  export type InputTuple = [market: string, oracleConsumer: AddressLike];
  export type OutputTuple = [market: string, oracleConsumer: string];
  export interface OutputObject {
    market: string;
    oracleConsumer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketRemovedEvent {
  export type InputTuple = [market: string, oracleConsumer: AddressLike];
  export type OutputTuple = [market: string, oracleConsumer: string];
  export interface OutputObject {
    market: string;
    oracleConsumer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketShutDownEvent {
  export type InputTuple = [isShutDown: boolean];
  export type OutputTuple = [isShutDown: boolean];
  export interface OutputObject {
    isShutDown: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PerpHub extends BaseContract {
  connect(runner?: ContractRunner | null): PerpHub;
  waitForDeployment(): Promise<this>;

  interface: PerpHubInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addSupportedMarket: TypedContractMethod<
    [_key: string, _value: AddressLike],
    [void],
    "nonpayable"
  >;

  claim: TypedContractMethod<
    [_round: BigNumberish, _counter: BigNumberish],
    [void],
    "nonpayable"
  >;

  counter: TypedContractMethod<[], [bigint], "view">;

  createOrder: TypedContractMethod<
    [
      _amount: BigNumberish,
      _fee: BigNumberish,
      _betOn: string,
      _time: BigNumberish,
      _direction: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  orders: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, string, bigint, bigint, bigint, bigint, string, bigint] & {
        isEntity: boolean;
        user: string;
        amount: bigint;
        price: bigint;
        direction: bigint;
        times: bigint;
        betOn: string;
        status: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  removeSupportedMarket: TypedContractMethod<
    [_key: string],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resolveRound: TypedContractMethod<
    [_rounds: BigNumberish[], _counters: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  shutDownMarket: TypedContractMethod<[_value: boolean], [void], "nonpayable">;

  supportedMarket: TypedContractMethod<[arg0: string], [string], "view">;

  totalCurrentTrade: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userOrder: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addSupportedMarket"
  ): TypedContractMethod<
    [_key: string, _value: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [_round: BigNumberish, _counter: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "counter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createOrder"
  ): TypedContractMethod<
    [
      _amount: BigNumberish,
      _fee: BigNumberish,
      _betOn: string,
      _time: BigNumberish,
      _direction: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "orders"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, string, bigint, bigint, bigint, bigint, string, bigint] & {
        isEntity: boolean;
        user: string;
        amount: bigint;
        price: bigint;
        direction: bigint;
        times: bigint;
        betOn: string;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeSupportedMarket"
  ): TypedContractMethod<[_key: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolveRound"
  ): TypedContractMethod<
    [_rounds: BigNumberish[], _counters: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "shutDownMarket"
  ): TypedContractMethod<[_value: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportedMarket"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "totalCurrentTrade"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userOrder"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "Claim"
  ): TypedContractEvent<
    ClaimEvent.InputTuple,
    ClaimEvent.OutputTuple,
    ClaimEvent.OutputObject
  >;
  getEvent(
    key: "CreateOrder"
  ): TypedContractEvent<
    CreateOrderEvent.InputTuple,
    CreateOrderEvent.OutputTuple,
    CreateOrderEvent.OutputObject
  >;
  getEvent(
    key: "MarketAdded"
  ): TypedContractEvent<
    MarketAddedEvent.InputTuple,
    MarketAddedEvent.OutputTuple,
    MarketAddedEvent.OutputObject
  >;
  getEvent(
    key: "MarketRemoved"
  ): TypedContractEvent<
    MarketRemovedEvent.InputTuple,
    MarketRemovedEvent.OutputTuple,
    MarketRemovedEvent.OutputObject
  >;
  getEvent(
    key: "MarketShutDown"
  ): TypedContractEvent<
    MarketShutDownEvent.InputTuple,
    MarketShutDownEvent.OutputTuple,
    MarketShutDownEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "Claim(address,uint256,uint256)": TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;
    Claim: TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;

    "CreateOrder(address,uint256,string,uint256,uint256)": TypedContractEvent<
      CreateOrderEvent.InputTuple,
      CreateOrderEvent.OutputTuple,
      CreateOrderEvent.OutputObject
    >;
    CreateOrder: TypedContractEvent<
      CreateOrderEvent.InputTuple,
      CreateOrderEvent.OutputTuple,
      CreateOrderEvent.OutputObject
    >;

    "MarketAdded(string,address)": TypedContractEvent<
      MarketAddedEvent.InputTuple,
      MarketAddedEvent.OutputTuple,
      MarketAddedEvent.OutputObject
    >;
    MarketAdded: TypedContractEvent<
      MarketAddedEvent.InputTuple,
      MarketAddedEvent.OutputTuple,
      MarketAddedEvent.OutputObject
    >;

    "MarketRemoved(string,address)": TypedContractEvent<
      MarketRemovedEvent.InputTuple,
      MarketRemovedEvent.OutputTuple,
      MarketRemovedEvent.OutputObject
    >;
    MarketRemoved: TypedContractEvent<
      MarketRemovedEvent.InputTuple,
      MarketRemovedEvent.OutputTuple,
      MarketRemovedEvent.OutputObject
    >;

    "MarketShutDown(bool)": TypedContractEvent<
      MarketShutDownEvent.InputTuple,
      MarketShutDownEvent.OutputTuple,
      MarketShutDownEvent.OutputObject
    >;
    MarketShutDown: TypedContractEvent<
      MarketShutDownEvent.InputTuple,
      MarketShutDownEvent.OutputTuple,
      MarketShutDownEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  FeedConsumer,
  FeedConsumerInterface,
} from "../../contracts/FeedConsumer";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "aggregatorProxy",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLatestData",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getPrevData",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610665380380610665833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b61054e806101176000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063313ce56714610046578063ab757d6114610064578063e459c81914610083575b600080fd5b61004e6100b4565b60405161005b91906102c3565b60405180910390f35b61006c61014b565b60405161007a929190610310565b60405180910390f35b61009d60048036038101906100989190610380565b6101f3565b6040516100ab929190610310565b60405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610122573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014691906103d9565b905090565b60008060008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156101bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e09190610473565b5050925092505081819350935050509091565b60008060008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639a6fc8f5866040518263ffffffff1660e01b815260040161025291906104fd565b60a060405180830381865afa15801561026f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102939190610473565b505092509250508181935093505050915091565b600060ff82169050919050565b6102bd816102a7565b82525050565b60006020820190506102d860008301846102b4565b92915050565b6000819050919050565b6102f1816102de565b82525050565b6000819050919050565b61030a816102f7565b82525050565b600060408201905061032560008301856102e8565b6103326020830184610301565b9392505050565b600080fd5b600069ffffffffffffffffffff82169050919050565b61035d8161033e565b811461036857600080fd5b50565b60008135905061037a81610354565b92915050565b60006020828403121561039657610395610339565b5b60006103a48482850161036b565b91505092915050565b6103b6816102a7565b81146103c157600080fd5b50565b6000815190506103d3816103ad565b92915050565b6000602082840312156103ef576103ee610339565b5b60006103fd848285016103c4565b91505092915050565b60008151905061041581610354565b92915050565b610424816102de565b811461042f57600080fd5b50565b6000815190506104418161041b565b92915050565b610450816102f7565b811461045b57600080fd5b50565b60008151905061046d81610447565b92915050565b600080600080600060a0868803121561048f5761048e610339565b5b600061049d88828901610406565b95505060206104ae88828901610432565b94505060406104bf8882890161045e565b93505060606104d08882890161045e565b92505060806104e188828901610406565b9150509295509295909350565b6104f78161033e565b82525050565b600060208201905061051260008301846104ee565b9291505056fea2646970667358221220404986db362effd3aafa70ec0f63a11a0bccb140129a47da8d5e08fc249bcc8164736f6c63430008140033";

type FeedConsumerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FeedConsumerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FeedConsumer__factory extends ContractFactory {
  constructor(...args: FeedConsumerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    aggregatorProxy: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(aggregatorProxy, overrides || {});
  }
  override deploy(
    aggregatorProxy: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(aggregatorProxy, overrides || {}) as Promise<
      FeedConsumer & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): FeedConsumer__factory {
    return super.connect(runner) as FeedConsumer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FeedConsumerInterface {
    return new Interface(_abi) as FeedConsumerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): FeedConsumer {
    return new Contract(address, _abi, runner) as unknown as FeedConsumer;
  }
}
